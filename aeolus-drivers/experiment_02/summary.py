"""
This module prints a summary report for the accompanying "results.csv" file
generated by running experiment #02 on Spark.
"""


def print_record(record):
    """ Format and print a CSV record. """
    fields = record.split(',')
    print "    Folds : %s" % fields[0] 
    print "    Neighbors : %s" % fields[1] 
    print "    Power : %s" % fields[2] 
    print "    Time Scale : %s" % fields[3] 
    print "    MARE : %s" % fields[4] 
    print "    RMSPE : %s" % fields[5] 


def main():
    """ Application main. """

    # load records from "results.csv"
    record_list = []
    with open('results.csv') as f:
        f.readline()
        record_list.extend(f) 
    record_list = map(lambda s: s.strip(), record_list)

    # average the error statistics for each conf_id
    temp = []
    for i in range(5616):

        # extract records of interest into r
        r = [record_list[i], record_list[i + 5616], record_list[i + 2 * 5616]]

        # check for mismatched conf_ids
        conf_ids = [float((item.split(',')[1])) for item in r]
        if not (conf_ids[0] == conf_ids[1] and conf_ids[1] == conf_ids[2]):
            raise Exception("Mismatched conf_ids at conf_id " + i + ".")

        # collect and average MARE values
        mare = map(lambda item: float(item.split(',')[6]), r)
        avg_mare = sum(mare) / len(mare)

        # collect and average RMSPE values
        rmspe = map(lambda item: float(item.split(',')[7]), r)
        avg_rmspe = sum(rmspe) / len(rmspe)

        # build finalized record
        record = r[0]
        record = record.split(',')[2:6]
        record.append(str(avg_mare))
        record.append(str(avg_rmspe))
        record = ','.join(record)

        # append to temp
        temp.append(record)

    record_list = temp
    if len(record_list) != 5616:
        raise Exception("record_list wrong length after averaging")

    # print header
    print "\n======================================================"
    print "Summary for Experiment #02:"

    # sort records by MARE and print optimal record
    record_list.sort(key=lambda s: float(s.split(',')[4]))
    print "\nOptimal MARE result:"
    print_record(record_list[0])

    # sort records by RMSPE and print optimal record
    record_list.sort(key=lambda s: float(s.split(',')[5]))
    print "\nOptimal RMSPE result:"
    print_record(record_list[0])

    print "\nEND PROGRAM"
    print "======================================================\n"


if __name__ == "__main__":
    main()
